#!/usr/bin/env python
#####
#
# Synthetic Biology Gene Standardizer
# Copyright (c) 2015, Tyson R. Shepherd, PhD
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are those
# of the authors and should not be interpreted as representing official policies,
# either expressed or implied, of Uppsala University.
#
#####
import random
CodonTable = {
	'C': ['TGC', 'TGT'],
	'D': ['GAT', 'GAC'],
	'S': ['AGC', 'TCT', 'AGT', 'TCC', 'TCA', 'TCG'],
	'Q': ['CAG', 'CAA'],
	'M': ['ATG'],
	'N': ['AAC', 'AAT'],
	'P': ['CCG', 'CCA', 'CCT', 'CCC'],
	'K': ['AAA', 'AAG'],
	'STOP': ['TAA', 'TGA', 'TAG'],
	'T': ['ACC', 'ACG', 'ACT', 'ACA'],
	'F': ['TTT', 'TTC'],
	'A': ['GCG', 'GCC', 'GCA', 'GCT'],
	'G': ['GGC', 'GGT', 'GGG', 'GGA'],
	'I': ['ATT', 'ATC', 'ATA'],
	'L': ['CTG', 'TTA', 'TTG', 'CTT', 'CTC', 'CTA'],
	'H': ['CAT', 'CAC'],
	'R': ['CGT', 'CGC', 'CGG', 'CGA', 'AGA', 'AGG'],
	'W': ['TGG'],
	'V': ['GTG', 'GTT', 'GTC', 'GTA'],
	'E': ['GAA', 'GAG'],
	'Y': ['TAT', 'TAC']
};
CodonStat = {
	'C': [54, 46],
	'D': [63, 37],
	'S': [25, 17, 16, 15, 14, 14],
	'Q': [66, 34],
	'M': [100],
	'N': [51, 49],
	'P': [49, 20, 18, 13],
	'K': [74, 26],
	'STOP': [61, 30, 9],
	'T': [40, 25, 19, 17],
	'F': [58, 42],
	'A': [33, 26, 23, 18],
	'G': [37, 35, 15, 13],
	'I': [49, 39, 11],
	'L': [47, 14, 13, 12, 10, 4],
	'H': [57, 43],
	'R': [36, 36, 11, 7, 7, 4],
	'W': [100],
	'V': [35, 28, 20, 17],
	'E': [68, 32],
	'Y': [59, 41]
};
CodonEnz = {
	'C': [['cysT'], ['cysT']],
	'D': [['aspT'], ['aspT']],
	'S': [['serV'], ['serW'], ['serV'], ['serW'], ['serT'], ['serU']],
	'Q': [['glnV','glnU'], ['glnU']],
	'M': [['metV','metT']],
	'N': [['asnT'], ['asnT']],
	'P': [['proK'], ['proM'], ['proL'], ['proL']],
	'K': [['lysQ'], ['lysQ']],
	'STOP': ['TAA', 'TGA', 'TAG'],
	'T': [['thrT','thrV'], ['thrW','thrU'], [], ['thrU']],
	'F': [['pheU'], ['pheU']],
	'A': [['alaT'], ['alaW'], ['alaT'], []],
	'G': [['glyW'], [], ['glyU','glyT'], ['glyT']],
	'I': [['ileT'], ['ileT'], []],
	'L': [['leuP','leuT'], ['leuZ'], ['leuX'], [], ['leuU'], ['leuW']],
	'H': [[], ['hisR']],
	'R': [['argV'], [], ['argX'], [], ['argU'], ['argW']],
	'W': [['trpT']],
	'V': [['valT'], ['valW','valV'], ['valW','valV'], ['valT']],
	'E': [['gltT'], ['gltT']],
	'Y': [['tyrT','tyrU'], ['tyrT','tyrU']]
};
ReducedCodonTable = {
	'C': ['TGC', 'TGT'],
	'D': ['GAT', 'GAC'],
	'S': ['AGC'],
	'Q': ['CAG', 'CAA'],
	'M': ['ATG'],
	'N': ['AAC', 'AAT'],
	'P': ['CCG', 'CCA'],
	'K': ['AAA', 'AAG'],
	'STOP': ['TAA'],
	'T': ['ACC', 'ACG'],
	'F': ['TTT', 'TTC'],
	'A': ['GCG', 'GCC', 'GCA'],
	'G': ['GGC', 'GGT'],
	'I': ['ATT', 'ATC'],
	'L': ['CTG'],
	'H': ['CAT', 'CAC'],
	'R': ['CGT', 'CGC'],
	'W': ['TGG'],
	'V': ['GTG', 'GTT', 'GTC'],
	'E': ['GAA', 'GAG'],
	'Y': ['TAT', 'TAC']
}
KilledCodons = {
	'C': [],
	'D': [],
	'S': ['TCT', 'AGT', 'TCC', 'TCA', 'TCG'],
	'Q': [],
	'M': [],
	'N': [],
	'P': ['CCT', 'CCC'],
	'K': ['AAA', 'AAG'],
	'STOP': ['TAA', 'TGA', 'TAG'],
	'T': ['ACT', 'ACA'],
	'F': [],
	'A': ['GCT'],
	'G': ['GGG', 'GGA'],
	'I': ['ATA'],
	'L': ['TTA', 'TTG', 'CTT', 'CTC', 'CTA'],
	'H': [],
	'R': ['CGG', 'CGA', 'AGA', 'AGG'],
	'W': [],
	'V': ['GTA'],
	'E': [],
	'Y': []
}
ReducedCodonStat = {
	'C': [54, 46],
	'D': [63, 37],
	'S': [100],
	'Q': [66, 34],
	'M': [100],
	'N': [51, 49],
	'P': [71, 29],
	'K': [74, 26],
	'STOP': [100],
	'T': [62, 38],
	'F': [58, 42],
	'A': [40, 31, 29],
	'G': [51, 49],
	'I': [56, 44],
	'L': [100],
	'H': [57, 43],
	'R': [50, 50],
	'W': [100],
	'V': [42, 34, 24],
	'E': [68, 32],
	'Y': [59, 41]
};
ReducedCodonGenes = {
	'C': ['cysT','cysT'],
	'D': ['aspT','aspT'],
	'S': ['serV'],
	'Q': ['glnV', 'glnU'],
	'M': [['metV','metU']],
	'N': ['asnT','asnT'],
	'P': ['proK', 'proM'],
	'K': ['lysW', 'lysW'],
	'STOP': ['TAA'],
	'T': ['thrT', 'thrU'],
	'F': ['pheU', 'pheU'],
	'A': ['alaT', 'alaW', 'alaT'],
	'G': ['glyW', 'glyT'],
	'I': ['ileT', 'ileT'],
	'L': ['leuT'],
	'H': ['hisR', 'hisR'],
	'R': ['argV', 'argV'],
	'W': ['trpT'],
	'V': ['valT', 'valW', 'valW'],
	'E': ['gltT', 'gltT'],
	'Y': ['tyrT', 'tyrT']
};
ReducedCodonGene = {
	'C': ['cysT'],
	'D': ['aspT'],
	'S': ['serV'],
	'Q': ['glnV', 'glnU'],
	'M': ['metV', 'metU'],
	'N': ['asnT'],
	'P': ['proK', 'proM'],
	'K': ['lysW'],
	'STOP': ['TAA'],
	'T': ['thrT','thrU'],
	'F': ['pheU'],
	'A': ['alaT', 'alaW'],
	'G': ['glyW', 'glyT'],
	'I': ['ileT'],
	'L': ['leuZ'],
	'H': ['hisR'],
	'R': ['argV'],
	'W': ['trpT'],
	'V': ['valT','valW'],
	'E': ['gltU'],
	'Y': ['tyrU']
};

TranscriptionUnit = [['glyW','cysT','leuZ'],['serV','argV'],['metU','glnV'],['glnU'],
	['asnT'],['proK'],['hisR','leuT','proM'],['valT','lysW'],['thrU','tyrU','glyT','thrT'],
	['pheU'],['ileT','alaT'],['alaW'],['rrsC','gltU','rrlC','rrfC','aspT','trpT'],['valW'],['metV']]
RNASeqs = {
	'rrlA': '',
	'rrfA': '',
	'rrsA': '',
	'rrlB': '',
	'rrfB': '',
	'rrsB': '',
	'rrlC': '',
	'rrfC': '',
	'rrsC': '',
	'rrlD': '',
	'rrfD': '',
	'rrsD': '',
	'rrlE': '',
	'rrfE': '',
	'rrsE': '',
	'rrlF': '',
	'rrfF': '',
	'rrsF': '',
	'rrlG': '',
	'rrfG': '',
	'rrsG': '',
	'rrlH': '',
	'rrfH': '',
	'rrsH': '',
	'cysT': 'GGCGCGTTAACAAAGCGGTTATGTAGCGGATTGCAAATCCGTCTAGTCCGGTTCGACTCCGGAACGCGCCTCCA',
	'aspT': 'GGAGCGGTAGTTCAGTCGGTTAGAATACCTGCCTGTCACGCAGGGGGTCGCGGGTTCGAGTCCCGTCCGTTCCGCCA',
	'aspU': 'GGAGCGGTAGTTCAGTCGGTTAGAATACCTGCCTGTCACGCAGGGGGTCGCGGGTTCGAGTCCCGTCCGTTCCGCCA',
	'aspV': 'GGAGCGGTAGTTCAGTCGGTTAGAATACCTGCCTGTCACGCAGGGGGTCGCGGGTTCGAGTCCCGTCCGTTCCGCCA',
	'serV': 'GGTGAGGTGGCCGAGAGGCTGAAGGCGCTCCCCTGCTAAGGGAGTATGCGGTCAAAAGCTGCATCCGGGGTTCGAATCCCCGCCTCACCGCCA',
	'serW': 'GGTGAGGTGTCCGAGTGGCTGAAGGAGCACGCCTGGAAAGTGTGTATACGGCAACGTATCGGGGGTTCGAATCCCCCCCTCACCGCCA',
	'serX': 'GGTGAGGTGTCCGAGTGGCTGAAGGAGCACGCCTGGAAAGTGTGTATACGGCAACGTATCGGGGGTTCGAATCCCCCCCTCACCGCCA',
	'serT': 'GGAAGTGTGGCCGAGCGGTTGAAGGCACCGGTCTTGAAAACCGGCGACCCGAAAGGGTTCCAGAGTTCGAATCTCTGCGCTTCCGCCA',
	'serU': 'GGAGAGATGCCGGAGCGGCTGAACGGACCGGTCTCGAAAACCGGAGTAGGGGCAACTCTACCGGGGGTTCAAATCCCCCTCTCTCCGCCA',
	'glnV': 'TGGGGTATCGCCAAGCGGTAAGGCACCGGATTCTGATTCCGGCATTCCGAGGTTCGAATCCTCGTACCCCAGCCA',
	'glnX': 'TGGGGTATCGCCAAGCGGTAAGGCACCGGATTCTGATTCCGGCATTCCGAGGTTCGAATCCTCGTACCCCAGCCA',
	'glnU': 'TGGGGTATCGCCAAGCGGTAAGGCACCGGTTTTTGATACCGGCATTCCCTGGTTCGAATCCAGGTACCCCAGCCA',
	'glnW': 'TGGGGTATCGCCAAGCGGTAAGGCACCGGTTTTTGATACCGGCATTCCCTGGTTCGAATCCAGGTACCCCAGCCA',
	'metV': 'CGCGGGGTGGAGCAGCCTGGTAGCTCGTCGGGCTCATAACCCGAAGGTCGTCGGTTCAAATCCGGCCCCCGCAACCA',
	'metW': 'CGCGGGGTGGAGCAGCCTGGTAGCTCGTCGGGCTCATAACCCGAAGGTCGTCGGTTCAAATCCGGCCCCCGCAACCA',
	'metY': 'CGCGGGGTGGAGCAGCCTGGTAGCTCGTCGGGCTCATAACCCGAAGATCGTCGGTTCAAATCCGGCCCCCGCAACCA',
	'metZ': 'CGCGGGGTGGAGCAGCCTGGTAGCTCGTCGGGCTCATAACCCGAAGGTCGTCGGTTCAAATCCGGCCCCCGCAACCA',
	'metT': 'GGCTACGTAGCTCAGTTGGTTAGAGCACATCACTCATAATGATGGGGTCACAGGTTCGAATCCCGTCGTAGCCACCA',
	'metU': 'GGCTACGTAGCTCAGTTGGTTAGAGCACATCACTCATAATGATGGGGTCACAGGTTCGAATCCCGTCGTAGCCACCA',
	'asnT': 'TCCTCTGTAGTTCAGTCGGTAGAACGGCGGACTGTTAATCCGTATGTCACTGGTTCGAGTCCAGTCAGAGGAGCCA',
	'asnU': 'TCCTCTGTAGTTCAGTCGGTAGAACGGCGGACTGTTAATCCGTATGTCACTGGTTCGAGTCCAGTCAGAGGAGCCA',
	'asnV': 'TCCTCTGTAGTTCAGTCGGTAGAACGGCGGACTGTTAATCCGTATGTCACTGGTTCGAGTCCAGTCAGAGGAGCCA',
	'asnW': 'TCCTCTGTAGTTCAGTCGGTAGAACGGCGGACTGTTAATCCGTATGTCACTGGTTCGAGTCCAGTCAGAGGAGCCA',
	'proK': 'CGGTGATTGGCGCAGCCTGGTAGCGCACTTCGTTCGGGACGAAGGGGTCGGAGGTTCGAATCCTCTATCACCGACCA',
	'proM': 'CGGCGAGTAGCGCAGCTTGGTAGCGCAACTGGTTTGGGACCAGTGGGTCGGAGGTTCGAATCCTCTCTCGCCGACCA',
	'proL': 'CGGCACGTAGCGCAGCCTGGTAGCGCACCGTCATGGGGTGTCGGGGGTCGGAGGTTCAAATCCTCTCGTGCCGACCA',
	'lysQ': 'GGGTCGTTAGCTCAGTTGGTAGAGCAGTTGACTTTTAATCAATTGGTCGCAGGTTCGAATCCTGCACGACCCACCA',
	'lysT': 'GGGTCGTTAGCTCAGTTGGTAGAGCAGTTGACTTTTAATCAATTGGTCGCAGGTTCGAATCCTGCACGACCCACCA',
	'lysV': 'GGGTCGTTAGCTCAGTTGGTAGAGCAGTTGACTTTTAATCAATTGGTCGCAGGTTCGAATCCTGCACGACCCACCA',
	'lysW': 'GGGTCGTTAGCTCAGTTGGTAGAGCAGTTGACTTTTAATCAATTGGTCGCAGGTTCGAATCCTGCACGACCCACCA',
	'lysY': 'GGGTCGTTAGCTCAGTTGGTAGAGCAGTTGACTTTTAATCAATTGGTCGCAGGTTCGAATCCTGCACGACCCACCA',
	'lysZ': 'GGGTCGTTAGCTCAGTTGGTAGAGCAGTTGACTTTTAATCAATTGGTCGCAGGTTCGAATCCTGCACGACCCACCA',
	'thrT': 'GCTGATATAGCTCAGTTGGTAGAGCGCACCCTTGGTAAGGGTGAGGTCGGCAGTTCGAATCTGCCTATCAGCACCA',
	'thrV': 'GCTGATATGGCTCAGTTGGTAGAGCGCACCCTTGGTAAGGGTGAGGTCCCCAGTTCGACTCTGGGTATCAGCACCA',
	'thrW': 'GCCGATATAGCTCAGTTGGTAGAGCAGCGCATTCGTAATGCGAAGGTCGTAGGTTCGACTCCTATTATCGGCACCA',
	'thrU': 'GCCGACTTAGCTCAGTAGGTAGAGCAACTGACTTGTAATCAGTAGGTCACCAGTTCGATTCCGGTAGTCGGCACCA',
	'pheU': 'GCCCGGATAGCTCAGTCGGTAGAGCAGGGGATTGAAAATCCCCGTGTCCTTGGTTCGATTCCGAGTCCGGGCACCA',
	'pheV': 'GCCCGGATAGCTCAGTCGGTAGAGCAGGGGATTGAAAATCCCCGTGTCCTTGGTTCGATTCCGAGTCCGGGCACCA',
	'alaT': 'GGGGCTATAGCTCAGCTGGGAGAGCGCCTGCTTTGCACGCAGGAGGTCTGCGGTTCGATCCCGCATAGCTCCACCA',
	'alaU': 'GGGGCTATAGCTCAGCTGGGAGAGCGCCTGCTTTGCACGCAGGAGGTCTGCGGTTCGATCCCGCATAGCTCCACCA',
	'alaV': 'GGGGCTATAGCTCAGCTGGGAGAGCGCCTGCTTTGCACGCAGGAGGTCTGCGGTTCGATCCCGCATAGCTCCACCA',
	'alaW': 'GGGGCTATAGCTCAGCTGGGAGAGCGCTTGCATGGCATGCAAGAGGTCAGCGGTTCGATCCCGCTTAGCTCCACCA',
	'alaX': 'GGGGCTATAGCTCAGCTGGGAGAGCGCTTGCATGGCATGCAAGAGGTCAGCGGTTCGATCCCGCTTAGCTCCACCA',
	'glyV': 'GCGGGAATAGCTCAGTTGGTAGAGCACGACCTTGCCAAGGTCGGGGTCGCGAGTTCGAGTCTCGTTTCCCGCTCCA',
	'glyW': 'GCGGGAATAGCTCAGTTGGTAGAGCACGACCTTGCCAAGGTCGGGGTCGCGAGTTCGAGTCTCGTTTCCCGCTCCA',
	'glyX': 'GCGGGAATAGCTCAGTTGGTAGAGCACGACCTTGCCAAGGTCGGGGTCGCGAGTTCGAGTCTCGTTTCCCGCTCCA',
	'glyY': 'GCGGGAATAGCTCAGTTGGTAGAGCACGACCTTGCCAAGGTCGGGGTCGCGAGTTCGAGTCTCGTTTCCCGCTCCA',
	'glyU': 'GCGGGCGTAGTTCAATGGTAGAACGAGAGCTTCCCAAGCTCTATACGAGGGTTCGATTCCCTTCGCCCGCTCCA',
	'glyT': 'GCGGGCATCGTATAATGGCTATTACCTCAGCCTTCCAAGCTGATGATGCGGGTTCGATTCCCGCTGCCCGCTCCA',
	'ileT': 'AGGCTTGTAGCTCAGGTGGTTAGAGCGCACCCCTGATAAGGGTGAGGTCGGTGGTTCAAGTCCACTCAGGCCTACCA',
	'ileU': 'AGGCTTGTAGCTCAGGTGGTTAGAGCGCACCCCTGATAAGGGTGAGGTCGGTGGTTCAAGTCCACTCAGGCCTACCA',
	'ileV': 'AGGCTTGTAGCTCAGGTGGTTAGAGCGCACCCCTGATAAGGGTGAGGTCGGTGGTTCAAGTCCACTCAGGCCTACCA',
	'leuP': 'GCGAAGGTGGCGGAATTGGTAGACGCGCTAGCTTCAGGTGTTAGTGTTCTTACGGACGTGGGGGTTCAAGTCCCCCCCCTCGCACCA',
	'leuQ': 'GCGAAGGTGGCGGAATTGGTAGACGCGCTAGCTTCAGGTGTTAGTGTCCTTACGGACGTGGGGGTTCAAGTCCCCCCCCTCGCACCA',
	'leuT': 'GCGAAGGTGGCGGAATTGGTAGACGCGCTAGCTTCAGGTGTTAGTGTCCTTACGGACGTGGGGGTTCAAGTCCCCCCCCTCGCACCA',
	'leuV': 'GCGAAGGTGGCGGAATTGGTAGACGCGCTAGCTTCAGGTGTTAGTGTCCTTACGGACGTGGGGGTTCAAGTCCCCCCCCTCGCACCA',
	'leuZ': 'GCCCGGATGGTGGAATCGGTAGACACAAGGGATTTAAAATCCCTCGGCGTTCGCGCTGTGCGGGTTCAAGTCCCGCTCCGGGTACCA',
	'leuX': 'GCCGAAGTGGCGAAATCGGTAGACGCAGTTGATTCAAAATCAACCGTAGAAATACGTGCCGGTTCGAGTCCGGCCTTCGGCACCA',
	'leuU': 'GCCGAGGTGGTGGAATTGGTAGACACGCTACCTTGAGGTGGTAGTGCCCAATAGGGCTTACGGGTTCAAGTCCCGTCCTCGGTACCA',
	'leuW': 'GCGGGAGTGGCGAAATTGGTAGACGCACCAGATTTAGGTTCTGGCGCCGCAAGGTGTGCGAGTTCAAGTCTCGCCTCCCGCACCA',
	'hisR': 'GGTGGCTATAGCTCAGTTGGTAGAGCCCTGGATTGTGATTCCAGTTGTCGTGGGTTCGAATCCCATTAGCCACCCCA',
	'argQ': 'GCATCCGTAGCTCAGCTGGATAGAGTACTCGGCTACGAACCGAGCGGTCGGAGGTTCGAATCCTCCCGGATGCACCA',
	'argV': 'GCATCCGTAGCTCAGCTGGATAGAGTACTCGGCTACGAACCGAGCGGTCGGAGGTTCGAATCCTCCCGGATGCACCA',
	'argY': 'GCATCCGTAGCTCAGCTGGATAGAGTACTCGGCTACGAACCGAGCGGTCGGAGGTTCGAATCCTCCCGGATGCACCA',
	'argZ': 'GCATCCGTAGCTCAGCTGGATAGAGTACTCGGCTACGAACCGAGCGGTCGGAGGTTCGAATCCTCCCGGATGCACCA',
	'argX': 'GCGCCCGTAGCTCAGCTGGATAGAGCGCTGCCCTCCGGAGGCAGAGGTCTCAGGTTCGAATCCTGTCGGGCGCGCCA',
	'argU': 'GCGCCCTTAGCTCAGTTGGATAGAGCAACGACCTTCTAAGTCGTGGGCCGCAGGTTCGAATCCTGCAGGGCGCGCCA',
	'argW': 'GTCCTCTTAGTTAAATGGATATAACGAGCCCCTCCTAAGGGCTAATTGCAGGTTCGATTCCTGCAGGGGACACCA',
	'trpT': 'AGGGGCGTAGTTCAATTGGTAGAGCACCGGTCTCCAAAACCGGGTGTTGGGAGTTCGAGTCTCTCCGCCCCTGCCA',
	'valT': 'GGGTGATTAGCTCAGCTGGGAGAGCACCTCCCTTACAAGGAGGGGGTCGGCGGTTCGATCCCGTCATCACCCACCA',
	'valU': 'GGGTGATTAGCTCAGCTGGGAGAGCACCTCCCTTACAAGGAGGGGGTCGGCGGTTCGATCCCGTCATCACCCACCA',
	'valX': 'GGGTGATTAGCTCAGCTGGGAGAGCACCTCCCTTACAAGGAGGGGGTCGGCGGTTCGATCCCGTCATCACCCACCA',
	'valY': 'GGGTGATTAGCTCAGCTGGGAGAGCACCTCCCTTACAAGGAGGGGGTCGGCGGTTCGATCCCGTCATCACCCACCA',
	'valZ': 'GGGTGATTAGCTCAGCTGGGAGAGCACCTCCCTTACAAGGAGGGGGTCGGCGGTTCGATCCCGTCATCACCCACCA',
	'valW': 'GCGTCCGTAGCTCAGTTGGTTAGAGCACCACCTTGACATGGTGGGGGTCGGTGGTTCGAGTCCACTCGGACGCACCA',
	'valV': 'GCGTTCATAGCTCAGTTGGTTAGAGCACCACCTTGACATGGTGGGGGTCGTTGGTTCGAGTCCAATTGAACGCACCA',
	'gltT': 'GTCCCCTTCGTCTAGAGGCCCAGGACACCGCCCTTTCACGGCGGTAACAGGGGTTCGAATCCCCTAGGGGACGCCA',
	'gltU': 'GTCCCCTTCGTCTAGAGGCCCAGGACACCGCCCTTTCACGGCGGTAACAGGGGTTCGAATCCCCTAGGGGACGCCA',
	'gltV': 'GTCCCCTTCGTCTAGAGGCCCAGGACACCGCCCTTTCACGGCGGTAACAGGGGTTCGAATCCCCTAGGGGACGCCA',
	'gltW': 'GTCCCCTTCGTCTAGAGGCCCAGGACACCGCCCTTTCACGGCGGTAACAGGGGTTCGAATCCCCTAGGGGACGCCA',
	'tyrT': 'GGTGGGGTTCCCGAGCGGCCAAAGGGAGCAGACTGTAAATCTGCCGTCATCGACTTCGAAGGTTCGAATCCTTCCCCCACCACCA',
	'tyrU': 'GGTGGGGTTCCCGAGCGGCCAAAGGGAGCAGACTGTAAATCTGCCGTCACAGACTTCGAAGGTTCGAATCCTTCCCCCACCACCA',
	'tyrV': 'GGTGGGGTTCCCGAGCGGCCAAAGGGAGCAGACTGTAAATCTGCCGTCATCGACTTCGAAGGTTCGAATCCTTCCCCCACCACCA'
}
modEnzSeq={
	'trmB': '',
	'trmA':'ATGACCCCCGAACACCTTCCAACAGAACAGTATGAAGCGCAGTTAGCCGAAAAAGTGGTACGTTTGCAAAGTATGATGGCACCGTTTTCTGACCTGGTTCCGGAAGTGTTTCGCTCGCCGGTCAGTCATTACCGGATGCGCGCGGAGTTCCGCATCTGGCACGATGGTGATGACCTGTATCACATCATTTTCGATCAACAAACCAAAAGCCGCATCCGCGTGGATAGCTTCCCCGCCGCCAGTGAACTTATCAACCAGTTGATGACGGCCATGATTGCGGGTGTGCGTAATAATCCCGTTCTGCGCCACAAGTTGTTCCAGATTGATTACCTCACTACACTGAGTAATCAGGCGGTGGTTTCCCTGCTATACCATAAGAAGCTGGATGATGAGTGGCGTCAGGAAGCGGAGGCCCTGCGTGATGCACTGCGCGCGCAGAATCTGAATGTGCATCTGATTGGTCGGGCAACGAAAACCAAAATCGAGCTGGATCAGGATTACATCGATGAACGTCTGCCGGTCGCAGGGAAAGAGATGATCTACCGTCAGGTAGAAAACAGCTTTACCCAGCCGAACGCGGCCATGAATATTCAGATGCTGGAATGGGCGCTGGACGTAACCAAAGGCTCAAAAGGCGATTTACTGGAGCTGTACTGCGGCAACGGTAACTTTTCATTAGCGCTGGCGCGTAATTTTGATCGGGTATTAGCCACCGAAATCGCTAAGCCGTCGGTTGCTGCTGCGCAATACAACATTGCAGCTAACCATATTGATAACGTACAAATTATTCGTATGGCGGCAGAAGAGTTTACTCAGGCCATGAATGGTGTGCGCGAGTTTAACCGCCTGCAAGGGATCGACTTAAAGAGTTATCAGTGCGAAACCATTTTTGTCGACCCTCCGCGCAGCGGTCTGGACAGTGAAACCGAGAAAATGGTGCAGGCGTATCCGCGTATTTTGTACATCTCCTGTAACCCGGAAACGTTATGCAAGAATCTGGAAACATTAAGCCAGACGCACAAGGTCGAACGTCTGGCTCTGTTTGATCAGTTCCCCTACACGCACCACATGGAGTGCGGCGTATTACTGACCGCGAAGTAA',
	'truA': 'ATGTCCGACCAGCAACAACCGCCAGTTTATAAAATTGCGCTGGGCATTGAGTACGACGGCAGTAAGTATTACGGCTGGCAACGGCAGAACGAAGTCCGCAGTGTGCAGGAGAAGCTGGAAAAGGCGCTCTCCCAGGTGGCGAACGAACCCATCACCGTGTTCTGCGCCGGGCGTACTGACGCAGGGGTACACGGTACCGGGCAGGTTGTGCATTTCGAAACAACCGCGCTGCGCAAAGACGCGGCGTGGACCTTGGGCGTAAATGCGAACTTACCTGGTGACATTGCTGTGCGTTGGGTTAAAACTGTACCTGATGATTTTCATGCCCGATTTAGCGCCACGGCTCGCCGTTATCGCTACATCATCTACAATCATCGGCTGCGCCCGGCGGTACTGAGTAAAGGGGTAACCCATTTTTACGAACCGCTGGACGCTGAACGGATGCACCGGGCTGCGCAATGCTTGCTGGGCGAGAATGATTTCACCTCGTTCCGTGCGGTGCAGTGCCAGTCCCGAACCCCGTGGCGCAACGTTATGCACATTAATGTCACGCGTCACGGTCCTTATGTGGTGGTAGATATTAAAGCGAATGCTTTTGTACATCACATGGTCAGGAATATTGTCGGCAGCCTGATGGAAGTCGGTGCCCACAACCAGCCGGAGAGCTGGATCGCGGAACTGCTTGCTGCGAAAGATAGAACGCTGGCGGCAGCAACGGCAAAAGCGGAAGGGCTGTATCTGGTCGCGGTGGATTACCCTGACCGGTATGATCTTCCAAAACCGCCAATGGGCCCGCTATTTCTGGCGGACTAA',
	'truB': 'ATGAGCCGTCCTCGTCGTCGCGGTCGCGACATTAACGGCGTTTTGTTGCTGGATAAACCTCAGGGTATGTCCAGCAACGATGCGCTGCAAAAAGTGAAACGTATATATAACGCCAACCGTGCCGGGCATACCGGTGCGCTGGACCCGCTGGCGACCGGCATGTTGCCGATTTGCCTCGGGGAAGCGACGAAGTTTTCCCAGTATCTGCTGGATTCCGACAAACGCTATCGGGTCATTGCGCGTCTTGGACAGCGTACCGATACTTCTGATGCCGACGGACAGATCGTTGAAGAACGTCCGGTAACCTTTAGCGCGGAGCAGCTGGCAGCGGCACTGGATACTTTCCGTGGCGATATCGAACAGATCCCTTCGATGTATTCAGCACTGAAATATCAGGGCAAAAAACTGTACGAATATGCGCGTCAGGGCATTGAAGTTCCGCGTGAAGCGCGTCCGATTACCGTTTATGAATTGCTGTTTATTCGCCATGAAGGCAATGAGCTGGAGCTGGAAATCCACTGCTCAAAAGGCACTTATATCCGCACCATCATTGATGACCTGGGTGAAAAACTCGGCTGTGGCGCGCATGTTATTTACCTGCGCCGTCTGGCGGTAAGTAAATATCCGGTTGAACGGATGGTGACCCTGGAGCACCTGCGTGAACTTGTTGAGCAAGCTGAACAGCAGGATATTCCAGCCGCGGAGTTACTTGATCCATTACTGATGCCAATGGACAGTCCAGCTTCGGACTATCCGGTGGTGAATCTTCCGTTAACGAGCTCTGTTTACTTCAAAAATGGTAACCCGGTTCGTACATCTGGTGCGCCACTGGAAGGACTGGTTCGCGTCACGGAAGGTGAGAACGGCAAGTTTATCGGTATGGGCGAAATTGACGATGAAGGCCGCGTTGCGCCTCGTCGCCTGGTGGTTGAATACCCGGCGTAA',
}

RLD = {
	'TGC': 'C1', 'TGT': 'C2', 'GAT': 'D1', 'GAC': 'D2',
	'AGC': 'S1', 'TCT': 'S2', 'AGT': 'S3', 'TCC': 'S4', 'TCA': 'S5', 'TCG': 'S6',
	'CAG': 'Q1', 'CAA': 'Q2', 'ATG': 'M1', 'AAC': 'N1', 'AAT': 'N2',
	'CCG': 'P1', 'CCA': 'P2', 'CCT': 'P3', 'CCC': 'P4', 'AAA': 'K1', 'AAG': 'K2',
	'ACC': 'T1', 'ACG': 'T2', 'ACT': 'T3', 'ACA': 'T4', 'TTT': 'F1', 'TTC': 'F2',
	'GCG': 'A1', 'GCC': 'A2', 'GCA': 'A3', 'GCT': 'A4',
	'GGC': 'G1', 'GGT': 'G2', 'GGG': 'G3', 'GGA': 'G4',
	'ATT': 'I1', 'ATC': 'I2', 'ATA': 'I3',
	'CTG': 'L1', 'TTA': 'L2', 'TTG': 'L3', 'CTT': 'L4', 'CTC': 'L5', 'CTA': 'L6',
	'CAT': 'H1', 'CAC': 'H2',
	'CGT': 'R1', 'CGC': 'R2', 'CGG': 'R3', 'CGA': 'R4', 'AGA': 'R5', 'AGG': 'R6',
	'TGG': 'W1', 'GTG': 'V1', 'GTT': 'V2', 'GTC': 'V3', 'GTA': 'V4',
	'GAA': 'E1', 'GAG': 'E2', 'TAT': 'Y1', 'TAC': 'Y2',
	'TAA': 'STOP', 'TGA': 'STOP', 'TAG': 'STOP'
};

def RanReCodon( inCodon ):
	inAA = RLD[str(inCodon)][:1];
	outCodon = inCodon
	tmpCList = []
	if ((inAA != 'M') and (inAA != 'W') and (inAA != 'STOP')):
		for i in range(0, len(SynCodons[inAA])):
			for j in range (0, CodonStat[inAA][i]):
				tmpCList.append(str(SynCodons[inAA][i]));
		while outCodon == inCodon:
			outCodon = random.choice(tmpCList);
	if inAA == 'STOP':
		outCodon = 'TAA'
	return outCodon;

def MaxReCodon( inCodon ):
	inAA = RLD[str(inCodon)][:1];
	inNum = int(RLD[str(inCodon)][1:]);
	outCodon = inCodon
	if ((inAA != 'M') and (inAA != 'W') and (inAA != 'STOP')):
		if inNum > 1:
			outCodon = SynCodons[inAA][0];
		else:
			outCodon = SynCodons[inAA][1];
	if inAA == 'STOP':
		outCodon = 'TAA'
	return outCodon;

def MinimizeCodonUsage( inCodon ):
	inAA = RLD[str(inCodon)][:1];
	inNum = int(RLD[str(inCodon)][1:]);
	outCodon = inCodon
	tmpCList = []
	if ((inAA != 'M') and (inAA != 'W') and (inAA != 'STOP') and (inAA != 'S') and (inAA != 'L')):
		for i in range(0, len(ReducedCodonTable[inAA])):
			for j in range (0, ReducedCodonStat[inAA][i]):
				tmpCList.append(str(ReducedCodonTable[inAA][i]));
		while outCodon in KilledCodons[inAA]:
			outCodon = random.choice(tmpCList);
	if inAA == 'STOP':
		outCodon = 'TAA'
	return outCodon;
